name: Deploy Counter Service

on:
  push:
    branches:
      - main
      - private/omeravr/create-helm-chart

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build and push Docker image
      env:
        IMAGE_TAG: v1
      run: |
        docker build -t registry-1.docker.io/omerav10/counter-service:$IMAGE_TAG .
        docker push registry-1.docker.io/omerav10/counter-service:$IMAGE_TAG

    - name: Configure kubectl
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region eu-central-1

    - name: Deploy using Helm
      run: |
        helm repo remove my-repo
        helm repo add my-repo https://omeravr.github.io/counter-service
        helm repo update
        helm upgrade --install counter-service my-repo/counter-service-chart --namespace counter-service --create-namespace

    - name: Retrieve VPC ID
      id: get_vpc_id
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --query 'Vpcs[0].VpcId' --output text)
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

    - name: Retrieve LoadBalancer Name
      id: get_lb_name
      run: |
        CLUSTER_NAME=${{ secrets.EKS_CLUSTER_NAME }}
        LB_NAME=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(DNSName, 'nb') && contains(LoadBalancerName, '$CLUSTER_NAME')].DNSName" --output text)
        LB_ARN=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(DNSName, 'nb') && contains(LoadBalancerName, '$CLUSTER_NAME')].LoadBalancerArn" --output text)
        echo "LOAD_BALANCER_NAME=$LB_NAME" >> $GITHUB_ENV
        echo "LOAD_BALANCER_ARN=$LB_ARN" >> $GITHUB_ENV

    - name: Retrieve Service Port
      id: get_service_port
      run: |
        SERVICE_PORT=$(kubectl get svc counter-service -n counter-service -o jsonpath='{.spec.ports[0].nodePort}')
        echo "SERVICE_PORT=$SERVICE_PORT" >> $GITHUB_ENV

    - name: Create Target Group
      id: create_target_group
      run: |
        TG_ARN=$(aws elbv2 create-target-group \
          --name counter-service-tg \
          --protocol TCP \
          --port ${{ env.SERVICE_PORT }} \
          --vpc-id $VPC_ID \
          --target-type ip \
          --query 'TargetGroups[0].TargetGroupArn' \
          --output text)
        echo "TARGET_GROUP_ARN=$TG_ARN" >> $GITHUB_ENV

    - name: Create Listener
      run: |
        aws elbv2 create-listener \
          --load-balancer-arn ${{ env.LOAD_BALANCER_ARN }} \
          --protocol TCP \
          --port 80 \
          --default-actions Type=forward,TargetGroupArn=${{ env.TARGET_GROUP_ARN }}

    - name: Update TargetGroupBinding
      run: |
        sed -i "s|<TARGET_GROUP_ARN>|${{ env.TARGET_GROUP_ARN }}|g" k8s/target-group-binding.yaml

    - name: Apply TargetGroupBinding
      run: |
        kubectl apply -f k8s/target-group-binding.yaml -n counter-service

    - name: Validate Counter Service
      run: |
        # Initial POST request
        curl -X POST http://$LOAD_BALANCER_NAME/
        # Subsequent GET request to check the counter value
        curl http://$LOAD_BALANCER_NAME/


